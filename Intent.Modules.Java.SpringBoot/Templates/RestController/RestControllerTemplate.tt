<#@ template language="C#" inherits="JavaTemplateBase<Intent.Modelers.Services.Api.ServiceModel, Intent.Modules.Java.SpringBoot.Templates.RestController.RestControllerDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.Java.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
package <#= Package #>;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
<#= GetControllerAnnotations() #>
@AllArgsConstructor
public class <#= ClassName #> {
    private final <#= GetServiceInterfaceName() #> <#= GetServiceInterfaceName().ToCamelCase() #>;
<#  foreach(var operation in Model.Operations) { #>

    <#= GetOperationAnnotations(operation) #>
    public <#= GetReturnType(operation) #> <#= operation.Name #>(<#= GetParameters(operation) #>) {
<#
        var hasCheckedExceptions = HasCheckedExceptions(operation);
        if (hasCheckedExceptions)
        {
            PushIndent("    ");
#>
    try {
<#      }

        if (operation.ReturnType != null) { #>
        final <#= GetTypeName(operation) #> result = <#= GetServiceInterfaceName().ToCamelCase() #>.<#= operation.Name #>(<#= this.GetArguments(operation.Parameters) #>);
<#          if (!operation.ReturnType.IsNullable && !GetTypeInfo(operation.ReturnType).IsPrimitive && !operation.ReturnType.IsCollection) { #>
        if (result == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
<#          } #>
<#          if (!operation.ReturnType.IsNullable && operation.ReturnType.IsCollection) { #>
        if (result.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
<#          } #>
        return new ResponseEntity<>(result, <#= GetHttpResponseCode() #>);
<#      } else { #>
        <#= GetServiceInterfaceName().ToCamelCase() #>.<#= operation.Name #>(<#= this.GetArguments(operation.Parameters) #>);
<#      }

        if (hasCheckedExceptions)
        {
            PopIndent();
            foreach (var checkedException in GetCheckedExceptions(operation))
            { #>
        } catch (<#= checkedException.Types #> e) {
<#
                if (checkedException.Log) { #>
            log.error(e.getMessage(), e);
<#              } #>
            throw new <#= ImportType("org.springframework.web.server.ResponseStatusException") #>(<#= ImportType("org.springframework.http.HttpStatus") #>.<#= checkedException.HttpStatus #>);
<#          } #>
        }
<#      } #>
    }
<#
    } #>
}
