<#@ template language="C#" inherits="JavaTemplateBase<Intent.Modelers.Services.Api.ServiceModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.Java.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
package <#= Package #>;

import io.micrometer.core.annotation.Timed;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Map;

@RestController
@RequestMapping("<#= GetApiPath() #>")
@AllArgsConstructor
@Slf4j
public class <#= ClassName #> {
    private final <#= GetServiceInterfaceName() #> <#= GetServiceInterfaceName().ToCamelCase() #>;
<#  foreach(var operation in Model.Operations) { #>

    @GetMapping("/v1/<#= ClassName.ToKebabCase() #>/<#= operation.Name.ToKebabCase() #>")
    @Timed(value = "QRYSCU", extraTags = {"service", "<#= operation.Name #>"})//QRYSCU is the audit name of the service and is used in metrics
    public ResponseEntity<<#= GetTypeName(operation) #>> <#= operation.Name #>(<#= GetParameters(operation) #>) {
        final long startTime = System.currentTimeMillis();
        
        final <#= GetTypeName(operation) #> result = <#= GetServiceInterfaceName().ToCamelCase() #>.<#= operation.Name #>(<#= this.GetArguments(operation.Parameters) #>);

        log.info("Completed: getCustomerBySubscription()");
        return new ResponseEntity<>(result, HttpStatus.OK);
    }
<#  } #>
}
