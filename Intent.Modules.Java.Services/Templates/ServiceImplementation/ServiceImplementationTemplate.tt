<#@ template language="C#" inherits="JavaTemplateBase<Intent.Modelers.Services.Api.ServiceModel, Intent.Modules.Java.Services.Templates.ServiceImplementation.ServiceImplementationDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.Java.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
package <#= Package #>;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@AllArgsConstructor
<#= this.IntentMergeAnnotation() #>
public class <#= ClassName #> implements <#= GetTypeName(ServiceInterface.ServiceInterfaceTemplate.TemplateId, Model) #> {
<#  var parameters = GetConstructorDependencies(); 
    foreach (var parameter in parameters)
    { #>
    private <#= ImportType(parameter.Type) #> <#= parameter.Name.ToCamelCase() #>;
<#  } #>
<#  foreach(var operation in Model.Operations) { #>

    @Override
    @Transactional(readOnly = <#= IsReadOnly(operation) #>)
    <#= this.IntentIgnoreBodyAnnotation() #>
    public <#= GetTypeName(operation) #> <#= operation.Name #>(<#= this.GetMethodParameters(operation.Parameters) #>)<#= GetCheckedExceptions(operation) #> {
        <#= GetImplementation(operation) #>
    }
<#  } #>
}